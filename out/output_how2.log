nohup: ignoring input
Namespace(checkpoint_root='/data/zhaobo/zhouyufan/PDPP-Optimize/checkpoint', checkpoint_max_root='/data/zhaobo/zhouyufan/PDPP-Optimize/save_max', log_root='/data/zhaobo/zhouyufan/PDPP-Optimize/log/log', checkpoint_dir='whl', optimizer='adam', num_thread_reader=8, batch_size=256, batch_size_val=256, momemtum=0.9, save_freq=1, crop_only=1, centercrop=0, random_flip=1, verbose=1, fps=1, cudnn_benchmark=1, dataset='crosstask_how', action_dim=105, observation_dim=1536, class_dim=18, root='/data/zhaobo/zhouyufan/PDPP-Optimize/dataset/crosstask', json_path_train='/data/zhaobo/zhouyufan/PDPP-Optimize/dataset/crosstask/crosstask_release/train_list.json', json_path_val='/data/zhaobo/zhouyufan/PDPP-Optimize/dataset/crosstask/crosstask_release/test_list.json', json_path_val2='/data/zhaobo/zhouyufan/PDPP-Optimize/dataset/crosstask/crosstask_release/output6.json', n_train_steps=200, start_epoch=0, resume=False, resume_path='', evaluate=True, pretrained=False, pin_memory=True, world_size=1, rank=0, dist_file='dist-file', dist_backend='nccl', multiprocessing_distributed=False, name='how2', loss_type='Weighted_Gradient_MSE', ckpt_path='', dist_port=21712, log_freq=500, gpu=5, seed=217, weight=6, clip_denoised=True, ddim_discr_method='uniform', lr=0.0005, ema_decay=0.995, gradient_accumulate_every=1, step_start_ema=400, update_ema_every=10, ie_num=2, transformer_num=5, base_model='base', classfier_model='transformer', n_diffusion_steps=200, num_heads=4, num_layers=2, dim_feedforward=1024, dropout=0.4, horizon=6, epochs=0, if_jump=1, distributed=False)
Loaded /data/zhaobo/zhouyufan/PDPP-Optimize/dataset/crosstask/crosstask_release/train_list_6.json
Loaded /data/zhaobo/zhouyufan/PDPP-Optimize/dataset/crosstask/crosstask_release/output6.json
logging outputs to  /data/zhaobo/zhouyufan/PDPP-Optimize/log/log_how2_20240828211520_crosstask_how
total train:   0%|          | 0/120 [00:00<?, ?it/s]lrs:
2.5e-05
---------------------------------
/data/zhaobo/zhouyufan/PDPP-Optimize/utils/eval.py:88: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(A0_acc.avg), torch.tensor(AT_acc.avg)
total train:   1%|          | 1/120 [02:53<5:43:44, 173.32s/it]0.2139037400484085 0
lrs:
5e-05
---------------------------------
total train:   2%|▏         | 2/120 [05:41<5:35:23, 170.54s/it]2.0677361488342285 0.2139037400484085
lrs:
7.5e-05
---------------------------------
total train:   2%|▎         | 3/120 [08:55<5:53:17, 181.17s/it]2.2459893226623535 2.0677361488342285
lrs:
0.0001
---------------------------------
total train:   3%|▎         | 4/120 [12:27<6:13:47, 193.34s/it]2.816399335861206 2.2459893226623535
lrs:
0.000125
---------------------------------
total train:   4%|▍         | 5/120 [16:02<6:25:42, 201.24s/it]2.9233510494232178 2.816399335861206
lrs:
0.00015
---------------------------------
total train:   5%|▌         | 6/120 [19:37<6:31:01, 205.80s/it]0.0 2.9233510494232178
lrs:
0.000175
---------------------------------
total train:   6%|▌         | 7/120 [23:13<6:33:29, 208.93s/it]0.17825311422348022 2.9233510494232178
lrs:
0.0002
---------------------------------
total train:   7%|▋         | 8/120 [26:43<6:31:04, 209.50s/it]0.0 2.9233510494232178
lrs:
0.00022500000000000002
---------------------------------
total train:   8%|▊         | 9/120 [30:21<6:32:23, 212.10s/it]0.0 2.9233510494232178
/data/zhaobo/zhouyufan/PDPP-Optimize/utils/training.py:288: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(losses.avg), acc1, acc5, torch.tensor(trajectory_success_rate), \
total train:   8%|▊         | 10/120 [33:56<6:30:27, 212.98s/it]0.0 2.9233510494232178
lrs:
0.000275
---------------------------------
total train:   9%|▉         | 11/120 [37:30<6:27:24, 213.25s/it]0.0 2.9233510494232178
