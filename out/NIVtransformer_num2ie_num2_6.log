nohup: ignoring input
Namespace(checkpoint_root='/data/zhaobo/zhouyufan/PDPP-Optimize/checkpoint', checkpoint_max_root='/data/zhaobo/zhouyufan/PDPP-Optimize/save_max', log_root='/data/zhaobo/zhouyufan/PDPP-Optimize/log/log', checkpoint_dir='whl', optimizer='adam', num_thread_reader=8, batch_size=256, batch_size_val=256, momemtum=0.9, save_freq=1, crop_only=1, centercrop=0, random_flip=1, verbose=1, fps=1, cudnn_benchmark=1, dataset='NIV', action_dim=48, observation_dim=1536, class_dim=5, root='/data/zhaobo/zhouyufan/PDPP-Optimize/dataset/NIV', json_path_train='/data/zhaobo/zhouyufan/PDPP-Optimize/dataset/NIV/train70.json', json_path_val='/data/zhaobo/zhouyufan/PDPP-Optimize/dataset/NIV/test30.json', json_path_val2='/data/zhaobo/zhouyufan/PDPP-Optimize/dataset/NIV/output3.json', n_train_steps=50, start_epoch=0, resume=False, resume_path='', evaluate=True, pretrained=False, pin_memory=True, world_size=1, rank=0, dist_file='dist-file', dist_backend='nccl', multiprocessing_distributed=False, name='NIV6', loss_type='Weighted_Gradient_MSE', ckpt_path='', dist_port=21712, log_freq=500, gpu=0, seed=217, weight=6, clip_denoised=True, ddim_discr_method='uniform', lr=0.0003, ema_decay=0.995, gradient_accumulate_every=1, step_start_ema=400, update_ema_every=10, ie_num=2, transformer_num=2, base_model='predictor', classfier_model='transformer', n_diffusion_steps=50, num_heads=4, num_layers=2, dim_feedforward=1024, dropout=0.4, horizon=3, epochs=0, if_jump=1, distributed=False)
/data/zhaobo/zhouyufan/PDPP-Optimize/dataset/NIV/train70_3.json
Loaded /data/zhaobo/zhouyufan/PDPP-Optimize/dataset/NIV/train70_3.json
/data/zhaobo/zhouyufan/PDPP-Optimize/dataset/NIV/output3.json
Loaded /data/zhaobo/zhouyufan/PDPP-Optimize/dataset/NIV/output3.json
logging outputs to  /data/zhaobo/zhouyufan/PDPP-Optimize/log/log_NIV6_20240828212235_NIV
total train:   0%|          | 0/120 [00:00<?, ?it/s]lrs:
3.6118468576932333e-06
---------------------------------
/data/zhaobo/zhouyufan/PDPP-Optimize/utils/eval.py:88: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(A0_acc.avg), torch.tensor(AT_acc.avg)
total train:   1%|          | 1/120 [07:32<14:58:06, 452.83s/it]4.44444465637207 0
lrs:
7.2236937153864666e-06
---------------------------------
total train:   2%|▏         | 2/120 [14:54<14:37:31, 446.20s/it]3.7037036418914795 4.44444465637207
lrs:
1.08355405730797e-05
---------------------------------
total train:   2%|▎         | 3/120 [22:15<14:25:07, 443.66s/it]7.777777671813965 4.44444465637207
lrs:
1.4447387430772933e-05
---------------------------------
total train:   3%|▎         | 4/120 [29:45<14:22:44, 446.25s/it]17.037036895751953 4.44444465637207
